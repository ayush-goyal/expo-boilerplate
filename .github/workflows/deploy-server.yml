# GitHub Actions workflow for building Docker images and deploying to Coolify
# Documentation: https://coolify.io/docs/github-actions
name: Build and Deploy Server

on:
  push:
    branches: ["main"]
    paths:
      - "apps/server/**"
      - "packages/**"
      - ".github/workflows/deploy-server.yml"
      - "pnpm-lock.yaml"
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/server
  DOCKERFILE_PATH: ./apps/server/Dockerfile

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better caching

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      # Deploy to Coolify
      - name: Trigger Coolify Deployment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Triggering Coolify deployment..."
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            --request GET \
            "${{ secrets.COOLIFY_WEBHOOK_URL }}" \
            --header "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}")

          if [ "$response" = "200" ] || [ "$response" = "201" ]; then
            echo "✅ Coolify deployment triggered successfully"
          else
            echo "❌ Failed to trigger Coolify deployment. HTTP status: $response"
            exit 1
          fi

# Required GitHub Secrets:
# - COOLIFY_WEBHOOK_URL: The webhook URL from your Coolify application
# - COOLIFY_TOKEN: The API token from Coolify for authentication
#
# GitHub Token (GITHUB_TOKEN) is automatically provided by GitHub Actions
#
# To set up these secrets:
# 1. Go to Settings > Secrets and variables > Actions in your GitHub repository
# 2. Click "New repository secret" for each required secret
# 3. In Coolify, find your webhook URL in the application's "Webhook" section
# 4. Generate an API token in Coolify's user settings
